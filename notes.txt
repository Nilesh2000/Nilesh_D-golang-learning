Go is a statically typed language. It is not an Object Oriented Programming Approach
JavaScript, Python are dynamically typed language.

How do we run the project?
go run main.go
Run multiple files - go run main.go deck.go

What does 'package main' mean?
Package == Project == Workspace
The only requirement for a every file inside of a package must declare the package it belongs to. 
Two types of packages in Go:-
1. Executable - Generates a file that we can run
2. Reusable - Code used as helpers. Good place to put reusable logic.

The name of the package determines if you are going to be using an executable or dependency type package.
Use package main only when you want to spit out a runnable file. Must have a func called 'main'.
main function is automatically run when the program runs

package calculator - Defines a package that can be used as a dependency.

What does 'import fmt' mean?
import statement gives our package access to functionality and code present in a package called 'fmt'.
'fmt' is short for format.
Some standard library packages in Go are debug, math, encoding, crypto, io, fmt
You can also use the import statement to import packages authored by other people.

Files in the same package do not have to be imported into each other.

What's the 'func' thing?
func is short for function.

How is the main.go file organized?
1. Package declaration
2. Import other packages that we need.
3. Declare functions, tell Go to do things.

Commands available in GO CLI
go build - Compile file
go run - Compile and execute file
go fmt - Formats all the code in the current directory.
go install - Compile and installs a package.
go get - Download raw source code of someone else's package
go test - Runs any tests associated with the current project

Variables
var card string = "Nilesh"
var - Create a new Variable
card - name of Variable
string - Only a string will ever be assigned
Nilesh - Value assigned to the variable

var c, python, java bool - All variables will be assigned false values
var i int - i will be assigned 0 (Variables declared without an explicit initial value are given their zero value.)

The zero value is:
-> 0 for numeric types,
false for the boolean type, and
"" (the empty string) for strings.

Initializing Variables (If an initializer is present, the type can be omitted; the variable will take the type of the initializer.)
var c, python, java = true, false, "no!"

Declaring variables of different types
var (
	ToBe   bool       = false
	MaxInt uint64     = 1<<64 - 1
	z      complex128 = cmplx.Sqrt(-5 + 12i)
)

Typecasting Values
var x, y int = "3", 4
var f float64 = math.Sqrt(float64(x*x + y*y))
var z uint = uint(f)

Constants in Go:-
const World = "世界"
fmt.Println("Hello", World)

Constants are declared like variables, but with the const keyword.
Constants can be character, string, boolean, or numeric values.
Constants cannot be declared using the := syntax.

Basic Go types (Not an exhaustive list)
1. bool
2. string
3. int
4. float64

Go sometimes infers variable types for you. You can do card:= "Aces"
You can do this only while definig a variable and not while reassigning it.
We can initialize a varibale outside of a function, but can't assign a value to it using := syntax. We have to use = operator.

Define a New Function
func newCard() string {
    return "newCard"
}
newCard() is the name of the function
string specifies the return type of the function when it is executed.
If you specify an incorrect type, Go will throw an error.

Array - Fixed length list of things
Slice - An array that can grow or shrink. It is zero-indexed.
Every element in a slice must be of the same type.

Declare a slice
cards := []string{"Aces", "Diamonds", newCard()}
Get a range from the slice - fruits[startIndexInclduing:upToNotIncluding]
cards[:handSize] - from beginning to handSize
card[handSize:] - from handsize to last element

Add a card to slice
cards = append(cards, "Six of Spades") // Does not modify the existing slice. Creates a new slice which we assign to the initial variable.

Iterating over a slice
for i, card := range cards {
    fmt.Println(i, card)
}

i - index element of the array
card - Current card we're iterating over
range - Take the slice of cards and loop over it
fmt.Println - Run this one time for each card in the slice

Why do we use := in for loop even though it used to declare variable only the first time?
In a for loop after each iteration, we are throwing away the previous index and the previous card that had been declared.

Object Oriented Approach vs Go Approach?
OO Approach
Deck Class
    -> Create Deck Instance
    -> Methods
        -> print
        -> shuffle
        -> saveToFile

Base Go Types
-> string, integer, float, array, map
We want to extend a base type and add some extra functionality to it.

type deck[] string - We can create an array of strings and add a bunch of functions specifically made to work with it.
Functions with 'deck' as receiver - A function with a receiver is like a 'method' - a function that belongs to an instance.

Folder structure
main.go - Create and manipulate deck
deck.go - Code that describes a deck and how it works
deck_test.go - Code that automatically tests the deck

Purpose of Receiver
Any variable of type 'deck' now gets access to the 'print' method.

func (d deck) print() {}
deck here refers to the type that we want to attach this method to.
Any variable of type deck get access to the print method
You can relate 'd' to self in python
By convention, for a type of 'deck', you use the first letter as receiver. So, we use 'd'

Analogy with OO approach
Deck is the class
cards is the instance
print() is a method.

Replace index variables with _ to tell Go to ignore it if we haven't used it.

When importing a package, you can refer only to its exported names. Any "unexported" names are not accessible from outside the package.

When two or more consecutive named function parameters share a type, you can omit the type from all but the last.
func add(x, y int) int {
	return x + y
} // We shortened x int, y int to x, y int

Go's return values may be named. If so, they are treated as variables defined at the top of the function.
These names should be used to document the meaning of the return values.
A return statement without arguments returns the named return values. This is known as a "naked" return.
Naked return statements should be used only in short functions, as with the example shown here. They can harm readability in longer functions.

func split(sum int) (x, y int) {
	x = sum * 4 / 9
	y = sum - x
	return
}
